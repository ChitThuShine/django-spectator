# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-03 13:47
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('title', models.CharField(help_text="e.g. 'Aurora' or 'Vol. 39 No. 4, 16 February 2017'.", max_length=255)),
                ('kind', models.CharField(choices=[('book', 'Book'), ('periodical', 'Periodical')], default='book', max_length=20)),
                ('official_url', models.URLField(blank=True, help_text='Official URL for this book/issue.', max_length=255, verbose_name='Official URL')),
                ('isbn_gb', models.CharField(blank=True, help_text="e.g. '0356500489'.", max_length=20, verbose_name='UK ISBN')),
                ('isbn_us', models.CharField(blank=True, help_text="e.g. '0316098094'.", max_length=20, verbose_name='US ISBN')),
                ('notes_url', models.URLField(blank=True, help_text='URL of your notes/review.', max_length=255, verbose_name='Notes URL')),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='BookRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('role_name', models.CharField(blank=True, help_text="e.g. 'Headliner', 'Support', 'Editor', 'Illustrator', 'Director', etc. Optional.", max_length=50)),
                ('role_order', models.PositiveSmallIntegerField(default=1, help_text='The order in which the Creators will be listed.')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='spectator.Book')),
            ],
            options={
                'ordering': ('role_order', 'role_name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BookSeries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('title', models.CharField(help_text="e.g. 'The London Review of Books'.", max_length=255)),
                ('url', models.URLField(blank=True, help_text="e.g. 'https://www.lrb.co.uk/'.", max_length=255, verbose_name='URL')),
            ],
            options={
                'verbose_name_plural': 'Book series',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='ConcertRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('role_name', models.CharField(blank=True, help_text="e.g. 'Headliner', 'Support', 'Editor', 'Illustrator', 'Director', etc. Optional.", max_length=50)),
                ('role_order', models.PositiveSmallIntegerField(default=1, help_text='The order in which the Creators will be listed.')),
            ],
            options={
                'ordering': ('role_order', 'role_name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Creator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('name', models.CharField(help_text="e.g. 'Douglas Adams' or 'The Long Blondes'.", max_length=255)),
                ('sort_name', models.CharField(blank=True, help_text="e.g. 'Adams, Douglas' or 'Long Blondes, The'. If left blank, will be created automatically on save.", max_length=255)),
                ('kind', models.CharField(choices=[('individual', 'Individual'), ('group', 'Group')], default='individual', max_length=20)),
            ],
            options={
                'ordering': ('sort_name',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('title', models.CharField(blank=True, help_text="Optional. e.g., 'Indietracks 2017', 'Radio 1 Roadshow'.", max_length=255)),
                ('date', models.DateField(null=True)),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('title', models.CharField(max_length=255)),
                ('imdb_id', models.CharField(blank=True, help_text="Starts with 'tt', e.g. 'tt0100842'.", max_length=12, validators=[django.core.validators.RegexValidator(code='invalid_imdb_id', message='IMDb ID should be like "tt1234567"', regex='^tt\\d{7,10}$')], verbose_name='IMDb ID')),
                ('year', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Year of release.', null=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='MovieRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('role_name', models.CharField(blank=True, help_text="e.g. 'Headliner', 'Support', 'Editor', 'Illustrator', 'Director', etc. Optional.", max_length=50)),
                ('role_order', models.PositiveSmallIntegerField(default=1, help_text='The order in which the Creators will be listed.')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movie_roles', to='spectator.Creator')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='spectator.Movie')),
            ],
            options={
                'ordering': ('role_order', 'role_name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Play',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('title', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='PlayProduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('title', models.CharField(blank=True, help_text='Optional title of this production of the play.', max_length=255)),
            ],
            options={
                'ordering': ('play__title',),
            },
        ),
        migrations.CreateModel(
            name='PlayProductionRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('role_name', models.CharField(blank=True, help_text="e.g. 'Headliner', 'Support', 'Editor', 'Illustrator', 'Director', etc. Optional.", max_length=50)),
                ('role_order', models.PositiveSmallIntegerField(default=1, help_text='The order in which the Creators will be listed.')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='play_production_roles', to='spectator.Creator')),
                ('production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='spectator.PlayProduction')),
            ],
            options={
                'ordering': ('role_order', 'role_name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlayRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('role_name', models.CharField(blank=True, help_text="e.g. 'Headliner', 'Support', 'Editor', 'Illustrator', 'Director', etc. Optional.", max_length=50)),
                ('role_order', models.PositiveSmallIntegerField(default=1, help_text='The order in which the Creators will be listed.')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='play_roles', to='spectator.Creator')),
                ('play', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='spectator.Play')),
            ],
            options={
                'ordering': ('role_order', 'role_name'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('start_granularity', models.PositiveSmallIntegerField(choices=[(3, 'Y-m-d'), (4, 'Y-m'), (6, 'Y')], default=3)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('end_granularity', models.PositiveSmallIntegerField(choices=[(3, 'Y-m-d'), (4, 'Y-m'), (6, 'Y')], default=3)),
                ('is_finished', models.BooleanField(default=False, help_text='Did you finish the book?')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spectator.Book')),
            ],
            options={
                'ordering': ('end_date',),
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(auto_now_add=True, help_text='The time this item was created in the database.')),
                ('time_modified', models.DateTimeField(auto_now=True, help_text='The time this item was last saved to the database.')),
                ('name', models.CharField(max_length=255)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Concert',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='spectator.Event')),
            ],
            options={
                'abstract': False,
            },
            bases=('spectator.event',),
        ),
        migrations.CreateModel(
            name='MovieEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='spectator.Event')),
            ],
            options={
                'abstract': False,
            },
            bases=('spectator.event',),
        ),
        migrations.CreateModel(
            name='PlayProductionEvent',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='spectator.Event')),
            ],
            options={
                'abstract': False,
            },
            bases=('spectator.event',),
        ),
        migrations.AddField(
            model_name='playproduction',
            name='creators',
            field=models.ManyToManyField(help_text='The director, actors, etc. in this production.', related_name='play_productions', through='spectator.PlayProductionRole', to='spectator.Creator'),
        ),
        migrations.AddField(
            model_name='playproduction',
            name='play',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spectator.Play'),
        ),
        migrations.AddField(
            model_name='play',
            name='creators',
            field=models.ManyToManyField(related_name='plays', through='spectator.PlayRole', to='spectator.Creator'),
        ),
        migrations.AddField(
            model_name='movie',
            name='creators',
            field=models.ManyToManyField(related_name='movies', through='spectator.MovieRole', to='spectator.Creator'),
        ),
        migrations.AddField(
            model_name='event',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_spectator.event_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='event',
            name='venue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spectator.Venue'),
        ),
        migrations.AddField(
            model_name='concertrole',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='concert_roles', to='spectator.Creator'),
        ),
        migrations.AddField(
            model_name='bookrole',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_roles', to='spectator.Creator'),
        ),
        migrations.AddField(
            model_name='book',
            name='creators',
            field=models.ManyToManyField(related_name='books', through='spectator.BookRole', to='spectator.Creator'),
        ),
        migrations.AddField(
            model_name='book',
            name='series',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='spectator.BookSeries'),
        ),
        migrations.AddField(
            model_name='playproductionevent',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spectator.PlayProduction'),
        ),
        migrations.AddField(
            model_name='movieevent',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spectator.Movie'),
        ),
        migrations.AddField(
            model_name='concertrole',
            name='concert',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='spectator.Concert'),
        ),
        migrations.AddField(
            model_name='concert',
            name='creators',
            field=models.ManyToManyField(related_name='concerts', through='spectator.ConcertRole', to='spectator.Creator'),
        ),
    ]
